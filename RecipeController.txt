package com.coderscampus.assignment9.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.coderscampus.assignment9.domain.Recipe;

@RestController
public class RecipeController {
// Once you’ve ingested the recipe.txt file and stored the resulting 
// POJOs into a Collection, your next task is to create “endpoints” 
// inside of a RestController that will filter this data
	
	@Autowired
	private Recipe recipe;
	
	@GetMapping("/read-recipes")
	public String readRecipes() {
	// 	The “gluten-free” endpoint will only return a subset of 
	//  the full Collection where glutenFree is true
		System.out.println(recipe);
		
		return "String readRecipes()";
	}
	
	@GetMapping("/gluten-free")
	public Recipe[] getGlutenFree() {
	// 	The “gluten-free” endpoint will only return a subset of 
	//  the full Collection where glutenFree is true
		
		
		return null;
	}

	@GetMapping("/vegan")
	public Recipe[] getVegan() {
	// The “vegan” endpoint will only return a subset of 
	//the full Collection where vegan is true	
		return null;
	}

	
	@GetMapping("/vegan-and-gluten-free")
	public Recipe[] getVeganAndGlutenFree() {
	// The “vegan-and-gluten-free” endpoint will only return a subset 
	//  of the full Collection where glutenFree is true and vegan is true
		return null;
		
	}

	@GetMapping("/vegetarian")
	public Recipe[] getVegetarian() {
		// The “vegetarian” endpoint will only return a subset of the 
		// full Collection where vegetarian is true 
		return null;
		}
	
	@GetMapping("/all-recipes")
	public Recipe[] getAllRecipes() {
		// The “all-recipes” endpoint will not filter the data at all 
		// and should return the full Collection. 
		return null;
		}

}
